	.arch armv4t
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 6
	.eabi_attribute 18, 4
	.file	"FIR_Optimized_Fixed_Point.c"
	.text
	.align	2
	.global	FIR
	.type	FIR, %function
FIR:
	@ Function supports interworking.
	@ args = 8, pretend = 0, frame = 32
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	str	fp, [sp, #-4]!
	add	fp, sp, #0
	sub	sp, sp, #36
	str	r0, [fp, #-24]
	str	r1, [fp, #-28]
	str	r2, [fp, #-32]
	str	r3, [fp, #-36]
	mov	r3, #0
	str	r3, [fp, #-20]
	b	.L2
.L6:
	mov	r3, #0
	strh	r3, [fp, #-6]	@ movhi
	mov	r3, #0
	str	r3, [fp, #-16]
	b	.L3
.L5:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-16]
	rsb	r3, r3, r2
	str	r3, [fp, #-12]
	ldr	r3, [fp, #-12]
	cmp	r3, #0
	blt	.L4
	ldr	r2, [fp, #-12]
	ldr	r3, [fp, #4]
	cmp	r2, r3
	bge	.L4
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-24]
	add	r3, r3, r2
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r1, r3
	ldr	r2, [fp, #-12]
	ldr	r3, [fp, #-28]
	add	r3, r3, r2
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r3, r3, asl #24
	mov	r3, r3, asr #24
	mul	r3, r1, r3
	mov	r3, r3, asl #16
	mov	r2, r3, lsr #16
	ldrh	r3, [fp, #-6]
	add	r3, r2, r3
	mov	r3, r3, asl #16
	mov	r3, r3, lsr #16
	strh	r3, [fp, #-6]	@ movhi
.L4:
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
.L3:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-36]
	cmp	r2, r3
	blt	.L5
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-32]
	add	r2, r3, r2
	ldrsh	r3, [fp, #-6]
	mov	r3, r3, asr #7
	mov	r3, r3, asl #16
	mov	r3, r3, lsr #16
	and	r3, r3, #255
	strb	r3, [r2, #0]
	ldr	r3, [fp, #-20]
	add	r3, r3, #1
	str	r3, [fp, #-20]
.L2:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #8]
	cmp	r2, r3
	blt	.L6
	add	sp, fp, #0
	ldmfd	sp!, {fp}
	bx	lr
	.size	FIR, .-FIR
	.section	.rodata
	.align	2
.LC0:
	.ascii	"Usage: %s coeffs.txt input.txt\012\000"
	.align	2
.LC1:
	.ascii	"r\000"
	.align	2
.LC2:
	.ascii	"Error opening coefficients file.\000"
	.align	2
.LC3:
	.ascii	"Coeff Size: %d\012\000"
	.align	2
.LC4:
	.ascii	"Coeff %d: %d\012\000"
	.align	2
.LC5:
	.ascii	"Error opening inputs file.\000"
	.align	2
.LC6:
	.ascii	"Input Size: %d\012\000"
	.align	2
.LC7:
	.ascii	"Input %d: %d\012\000"
	.align	2
.LC8:
	.ascii	"Output %d: %d\012\000"
	.text
	.align	2
	.global	main
	.type	main, %function
main:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 160
	@ frame_needed = 1, uses_anonymous_args = 0
	stmfd	sp!, {r4, fp, lr}
	add	fp, sp, #8
	sub	sp, sp, #172
	str	r0, [fp, #-96]
	str	r1, [fp, #-100]
	ldr	r3, [fp, #-96]
	cmp	r3, #3
	beq	.L9
	ldr	r3, [fp, #-100]
	ldr	r3, [r3, #0]
	ldr	r0, .L20
	mov	r1, r3
	bl	printf
	b	.L10
.L9:
	mov	r3, sp
	str	r3, [fp, #-104]
	ldr	r3, [fp, #-100]
	add	r3, r3, #4
	ldr	r3, [r3, #0]
	str	r3, [fp, #-48]
	ldr	r0, [fp, #-48]
	ldr	r1, .L20+4
	bl	fopen
	mov	r3, r0
	str	r3, [fp, #-52]
	ldr	r3, [fp, #-52]
	cmp	r3, #0
	bne	.L11
	ldr	r0, .L20+8
	bl	puts
.L11:
	sub	r3, fp, #70
	mov	r0, r3
	mov	r1, #6
	ldr	r2, [fp, #-52]
	bl	fgets
	sub	r3, fp, #70
	mov	r0, r3
	bl	atoi
	mov	r3, r0
	str	r3, [fp, #-44]
	ldr	r0, [fp, #-44]
	mov	r3, r0
	mov	r1, r3
	mov	r2, #0
	mvn	r3, #0
	mov	r4, #15
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r1, lsr #29
	mov	r4, r2, asl #3
	str	r4, [fp, #-168]
	ldr	ip, [fp, #-168]
	orr	ip, r3, ip
	str	ip, [fp, #-168]
	mov	r3, r1, asl #3
	str	r3, [fp, #-172]
	sub	r2, fp, #172
	ldmia	r2, {r1-r2}
	str	r1, [fp, #-172]
	str	r2, [fp, #-168]
	mvn	r3, #0
	mov	r4, #15
	sub	r2, fp, #172
	ldmia	r2, {r1-r2}
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r0
	mov	r1, r3
	mov	r2, #0
	mvn	r3, #0
	mov	r4, #15
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r1, lsr #29
	mov	r4, r2, asl #3
	str	r4, [fp, #-160]
	ldr	ip, [fp, #-160]
	orr	ip, r3, ip
	str	ip, [fp, #-160]
	mov	r3, r1, asl #3
	str	r3, [fp, #-164]
	sub	r2, fp, #164
	ldmia	r2, {r1-r2}
	str	r1, [fp, #-164]
	str	r2, [fp, #-160]
	mvn	r3, #0
	mov	r4, #15
	sub	r2, fp, #164
	ldmia	r2, {r1-r2}
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r0
	add	r3, r3, #7
	add	r3, r3, #7
	mov	r3, r3, lsr #3
	mov	r3, r3, asl #3
	sub	sp, sp, r3
	add	r2, sp, #8
	str	r2, [fp, #-152]
	ldr	r4, [fp, #-152]
	add	r3, r4, #7
	mov	r3, r3, lsr #3
	mov	r3, r3, asl #3
	str	r3, [fp, #-152]
	ldr	ip, [fp, #-152]
	str	ip, [fp, #-64]
	ldr	r0, .L20+12
	ldr	r1, [fp, #-44]
	bl	printf
	mov	r3, #0
	str	r3, [fp, #-40]
	b	.L12
.L13:
	sub	r3, fp, #82
	mov	r0, r3
	mov	r1, #6
	ldr	r2, [fp, #-52]
	bl	fgets
	ldr	r4, [fp, #-40]
	sub	r3, fp, #82
	mov	r0, r3
	bl	atoi
	mov	r3, r0
	and	r3, r3, #255
	ldr	r2, [fp, #-64]
	strb	r3, [r2, r4]
	ldr	r2, [fp, #-40]
	ldr	r3, [fp, #-64]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	ldr	r0, .L20+16
	ldr	r1, [fp, #-40]
	mov	r2, r3
	bl	printf
	ldr	r3, [fp, #-40]
	add	r3, r3, #1
	str	r3, [fp, #-40]
.L12:
	ldr	r2, [fp, #-40]
	ldr	r3, [fp, #-44]
	cmp	r2, r3
	blt	.L13
	ldr	r3, [fp, #-100]
	add	r3, r3, #8
	ldr	r3, [r3, #0]
	str	r3, [fp, #-32]
	ldr	r0, [fp, #-32]
	ldr	r1, .L20+4
	bl	fopen
	mov	r3, r0
	str	r3, [fp, #-36]
	ldr	r3, [fp, #-36]
	cmp	r3, #0
	bne	.L14
	ldr	r0, .L20+20
	bl	puts
.L14:
	sub	r3, fp, #76
	mov	r0, r3
	mov	r1, #6
	ldr	r2, [fp, #-36]
	bl	fgets
	sub	r3, fp, #76
	mov	r0, r3
	bl	atoi
	mov	r3, r0
	str	r3, [fp, #-28]
	ldr	r0, [fp, #-28]
	mov	r3, r0
	mov	r1, r3
	mov	r2, #0
	mvn	r3, #0
	mov	r4, #15
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r1, lsr #29
	mov	r4, r2, asl #3
	str	r4, [fp, #-144]
	ldr	ip, [fp, #-144]
	orr	ip, r3, ip
	str	ip, [fp, #-144]
	mov	r3, r1, asl #3
	str	r3, [fp, #-148]
	sub	r2, fp, #148
	ldmia	r2, {r1-r2}
	str	r1, [fp, #-148]
	str	r2, [fp, #-144]
	mvn	r3, #0
	mov	r4, #15
	sub	r2, fp, #148
	ldmia	r2, {r1-r2}
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r0
	mov	r1, r3
	mov	r2, #0
	mvn	r3, #0
	mov	r4, #15
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r1, lsr #29
	mov	r4, r2, asl #3
	str	r4, [fp, #-136]
	ldr	ip, [fp, #-136]
	orr	ip, r3, ip
	str	ip, [fp, #-136]
	mov	r3, r1, asl #3
	str	r3, [fp, #-140]
	sub	r2, fp, #140
	ldmia	r2, {r1-r2}
	str	r1, [fp, #-140]
	str	r2, [fp, #-136]
	mvn	r3, #0
	mov	r4, #15
	sub	r2, fp, #140
	ldmia	r2, {r1-r2}
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r0
	add	r3, r3, #7
	add	r3, r3, #7
	mov	r3, r3, lsr #3
	mov	r3, r3, asl #3
	sub	sp, sp, r3
	add	r2, sp, #8
	str	r2, [fp, #-128]
	ldr	r4, [fp, #-128]
	add	r3, r4, #7
	mov	r3, r3, lsr #3
	mov	r3, r3, asl #3
	str	r3, [fp, #-128]
	ldr	ip, [fp, #-128]
	str	ip, [fp, #-60]
	ldr	r0, .L20+24
	ldr	r1, [fp, #-28]
	bl	printf
	mov	r3, #0
	str	r3, [fp, #-24]
	b	.L15
.L16:
	sub	r3, fp, #89
	mov	r0, r3
	mov	r1, #7
	ldr	r2, [fp, #-36]
	bl	fgets
	ldr	r4, [fp, #-24]
	sub	r3, fp, #89
	mov	r0, r3
	bl	atoi
	mov	r3, r0
	and	r3, r3, #255
	ldr	r2, [fp, #-60]
	strb	r3, [r2, r4]
	ldr	r2, [fp, #-24]
	ldr	r3, [fp, #-60]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	mov	r3, r3, asl #24
	mov	r3, r3, asr #24
	ldr	r0, .L20+28
	ldr	r1, [fp, #-24]
	mov	r2, r3
	bl	printf
	ldr	r3, [fp, #-24]
	add	r3, r3, #1
	str	r3, [fp, #-24]
.L15:
	ldr	r2, [fp, #-24]
	ldr	r3, [fp, #-28]
	cmp	r2, r3
	blt	.L16
	ldr	r2, [fp, #-28]
	ldr	r3, [fp, #-44]
	add	r3, r2, r3
	sub	r3, r3, #1
	str	r3, [fp, #-20]
	ldr	r0, [fp, #-20]
	mov	r3, r0
	mov	r1, r3
	mov	r2, #0
	mvn	r3, #0
	mov	r4, #15
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r1, lsr #29
	mov	r4, r2, asl #3
	str	r4, [fp, #-120]
	ldr	ip, [fp, #-120]
	orr	ip, r3, ip
	str	ip, [fp, #-120]
	mov	r3, r1, asl #3
	str	r3, [fp, #-124]
	sub	r2, fp, #124
	ldmia	r2, {r1-r2}
	str	r1, [fp, #-124]
	str	r2, [fp, #-120]
	mvn	r3, #0
	mov	r4, #15
	sub	r2, fp, #124
	ldmia	r2, {r1-r2}
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r0
	mov	r1, r3
	mov	r2, #0
	mvn	r3, #0
	mov	r4, #15
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r1, lsr #29
	mov	r4, r2, asl #3
	str	r4, [fp, #-112]
	ldr	ip, [fp, #-112]
	orr	ip, r3, ip
	str	ip, [fp, #-112]
	mov	r3, r1, asl #3
	str	r3, [fp, #-116]
	sub	r2, fp, #116
	ldmia	r2, {r1-r2}
	str	r1, [fp, #-116]
	str	r2, [fp, #-112]
	mvn	r3, #0
	mov	r4, #15
	sub	r2, fp, #116
	ldmia	r2, {r1-r2}
	and	r1, r1, r3
	and	r2, r2, r4
	mov	r3, r0
	add	r3, r3, #7
	add	r3, r3, #7
	mov	r3, r3, lsr #3
	mov	r3, r3, asl #3
	sub	sp, sp, r3
	add	r2, sp, #8
	str	r2, [fp, #-108]
	ldr	r4, [fp, #-108]
	add	r3, r4, #7
	mov	r3, r3, lsr #3
	mov	r3, r3, asl #3
	str	r3, [fp, #-108]
	ldr	ip, [fp, #-108]
	str	ip, [fp, #-56]
	ldr	r2, [fp, #-64]
	ldr	r1, [fp, #-60]
	ldr	ip, [fp, #-56]
	ldr	r3, [fp, #-28]
	str	r3, [sp, #0]
	ldr	r3, [fp, #-20]
	str	r3, [sp, #4]
	mov	r0, r2
	mov	r2, ip
	ldr	r3, [fp, #-44]
	bl	FIR
	mov	r3, #0
	str	r3, [fp, #-16]
	b	.L17
.L18:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-56]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	mov	r3, r3, asl #24
	mov	r3, r3, asr #24
	ldr	r0, .L20+32
	ldr	r1, [fp, #-16]
	mov	r2, r3
	bl	printf
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
.L17:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-20]
	cmp	r2, r3
	blt	.L18
	ldr	sp, [fp, #-104]
.L10:
	mov	r3, #0
	mov	r0, r3
	sub	sp, fp, #8
	ldmfd	sp!, {r4, fp, lr}
	bx	lr
.L21:
	.align	2
.L20:
	.word	.LC0
	.word	.LC1
	.word	.LC2
	.word	.LC3
	.word	.LC4
	.word	.LC5
	.word	.LC6
	.word	.LC7
	.word	.LC8
	.size	main, .-main
	.ident	"GCC: (Sourcery G++ Lite 2008q3-72) 4.3.2"
	.section	.note.GNU-stack,"",%progbits
